.constant
OBJREF 0x40			// needed for method invokation - see S.C.O. chapter 4
.end-constant

.main
.var
a
b
.end-var
start:  
    // Can you see this?
    BIPUSH 0x2
    BIPUSH 0x3
    INVOKEVIRTUAL imul
    INVOKEVIRTUAL print

.end-main

// Returns absolute value of int.
.method abs( int )

abs:    ILOAD int   // load integer argument onto stack
    IFLT lesszero
    // else, return integer as is.
    ILOAD int
    IRETURN
lesszero:   ILOAD int   // load argument onto stack.
    INEG    // Negate this integer. This is now on top of stack,
    IRETURN // ready to be returned...

.end-method


// Returns the min of arg1, arg2
.method min(arg1, arg2)

.var
.end-var

min:    
    // Take absolute values of arguments.
    ILOAD arg1
    INVOKEVIRTUAL abs
    ISTORE arg1
    ILOAD arg2
    INVOKEVIRTUAL abs
    ISTORE arg2
    ILOAD arg1
    ILOAD arg2

    ILOAD arg1
    ILOAD arg2
    ISUB    // arg1 - arg2 is on top of the stack.
    IFLT smaller1
    // Else, return arg2.
    ILOAD arg2
    IRETURN

smaller1:   ILOAD arg1  // Return arg1.
    IRETURN

.end-method


// Returns the max of abs(arg1), abs(arg2)
.method max(arg1, arg2)

.var
.end-var

max:
    // Take absolute values of arguments.
    ILOAD arg1
    INVOKEVIRTUAL abs
    ISTORE arg1
    ILOAD arg2
    INVOKEVIRTUAL abs
    ISTORE arg2
    ILOAD arg1
    ILOAD arg2

    ISUB    // arg1 - arg2 is on top of the stack.
    IFLT bigger1
    // Else, return arg1.
    ILOAD arg1
    IRETURN

bigger1:   ILOAD arg2  // Return arg2.
    IRETURN

.end-method


// Returns the product of int1 and int2.
.method imul(int1, int2)
.var
m
c
o
i
.end-var

imul:   
    BIPUSH 0x0
    ISTORE m            // m = 0

    ILOAD int1     // load absint1 onto stack
    ILOAD int2     // load absint2 onto stack
    INVOKEVIRTUAL min   // min is returned on top of stack.
    ISTORE c       // store as c.

    ILOAD int1     // load absint1 onto stack
    ILOAD int2     // load absint2 onto stack
    ILOAD int1
    INVOKEVIRTUAL max   // max is returned on top of stack.
    ISTORE o       // store as o.

    // i = 0
    BIPUSH 0x0
    ISTORE i        // i = 0

imul_loop:
    ILOAD m
    ILOAD o
    IADD    // m + o on top of stack.
    ISTORE m
    // Increment i.
    ILOAD i
    BIPUSH 0x1
    IADD
    ISTORE i    // ++i

    ILOAD i // Loop test - if i - c < 0, branch to loop body.
    ILOAD c
    ISUB    // i - c should be on TOS.
    IFLT imul_loop

    ILOAD int1 // Check if exactly one of int1 or int2 is negative...
    IFLT int1_neg    // int1 < 0...

    ILOAD int2 // Else, int1 positive...
    IFLT mul_negate     // Exactly one is positive.
    GOTO mul_continue   // Continue.

int1_neg:
    ILOAD int2
    IFLT mul_continue   // Both are neg, continue.
    // Else, exactly one is positive.
    // continue to mul_negate...

mul_negate:
    ILOAD m
    INEG    // -m on TOS
    ISTORE m    // Store as m.

mul_continue:
    // Return m.
    ILOAD m
    IRETURN

.end-method


// Returns int1 raised to the power of int2.
// Assumes that int2 >= 0, as we're dealing with integers.
.method power( int1, int2 )
.var
i
total
.end-var

power:  BIPUSH 0x1  // push 1 onto stack
    ISTORE total    // total = 1
    GOTO power_test // branch to loop test
power_body: ILOAD total // load total on to stack
    ILOAD int1  // load int1 on to stack
    INVOKEVIRTUAL imul  // compute product.
    ISTORE total    // total = total * int1
    // decrement int2.
    ILOAD int2
    BIPUSH 0x1
    ISUB    // int2 - 1 should (hopefully) be on TOS
    ISTORE int2     // int2 = int2 - 1

power_test: ILOAD int2  // load int2 onto stack, loop if positive. int2 > 0 iff -int2 < 0
    INEG    // negate int2 on TOS
    IFLT power_body // if -int2 < 0, execute loop body.

    // Return total.
    ILOAD total
    IRETURN

.end-method


.method print( total ) 		// print converts a number into a string of
				//   characters and prints them.  All of the characters
				//   are pushed onto the stack, least significant
				//   digit first, then popped off and printed.
.var
place
index
.end-var

print: 	BIPUSH 0x9		// there are 8 nibbles in each integer--setting
				//   this as nine pushes 10 characters onto the
 				//   stack, thus a total of ten printed digits,
				//   but setting this less does not remove the
				//   two leading zeros, just removes significant
				//   digits
	ISTORE index
	BIPUSH 0x1		// comparison bit
	ISTORE place
print1:	BIPUSH 0x0
	ILOAD index		// index = index - 1
	BIPUSH 0x1
	ISUB
	DUP
	IFEQ pall		// if index = 0  goto pall
	ISTORE index
	ILOAD total		// else
	ILOAD place		//
	IAND			//   if 1st bit of current nibble is zero (total & place)
	IFEQ print2		//     goto print2
	BIPUSH 0x1		//   else set first bit of character
	IADD
print2: ILOAD place		//   place = place << 1 
	DUP
	IADD
	ISTORE place
	ILOAD total
	ILOAD place
	IAND			//   if 2nd bit of current nibble is zero (total & place)
	IFEQ print3		//     goto print3
	BIPUSH 0x2		//   else set second bit of character
	IADD	
print3: ILOAD place		//   place = place << 1
	DUP
	IADD
	ISTORE place
	ILOAD total
	ILOAD place
	IAND			//   if 3rd bit of current nibble is zero (total & place)
	IFEQ print4		//     goto print4
	BIPUSH 0x4		//   else set second bit of character
	IADD	
print4: ILOAD place		//   place = place << 1
	DUP
	IADD
	ISTORE place
	ILOAD total
	ILOAD place
	IAND			//   if 4th bit of current nibble is zero (total & place)
	IFEQ print5		//     goto print5
	BIPUSH 0x8		//   else set second bit of character
	IADD	
print5: ILOAD place		//   place = place << 1
	DUP
	IADD
	ISTORE place
	GOTO print1
	
pall:   POP			// Pop off leading 0's
	POP
	BIPUSH 0x9
	ISTORE index
pall1:	ILOAD index		// index = index - 1
	BIPUSH 0x1
	ISUB
	DUP
	IFEQ return		// if index = 0  return
	ISTORE index
	DUP
	BIPUSH 0xa		// else if character < 0xa goto pall1
	ISUB
	IFLT pall2
	BIPUSH 0x37		// else convert character to "A"-"F"
	IADD
	OUT			// print character
	GOTO pall1		// goto pall (prepare & print next character)
pall2:	BIPUSH 0x30		// convert character to "0"-"9"
	IADD
	OUT			// print character
	GOTO pall1		// goto pall1 (prepare & print next character)
return:	BIPUSH 0xa		// print cr
	OUT
	IRETURN			// no return value
.end-method
